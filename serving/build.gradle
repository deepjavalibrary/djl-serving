plugins {
    id 'application'
    id "nebula.ospackage" version "8.5.6"
}

dependencies {
    api platform("ai.djl:bom:${project.version}")
    api project(":wlm")
    api "io.netty:netty-codec-http:${netty_version}"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-aarch_64"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-x86_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-aarch_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-x86_64"

    implementation "org.yaml:snakeyaml:${snakeyaml_version}"
    //noinspection GradlePackageUpdate
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"
    implementation "com.lmax:disruptor:${disruptor_version}"

    runtimeOnly "ai.djl:model-zoo"
    runtimeOnly "ai.djl.mxnet:mxnet-model-zoo"
    runtimeOnly "ai.djl.tensorflow:tensorflow-model-zoo"
    runtimeOnly "ai.djl.pytorch:pytorch-model-zoo"
    runtimeOnly "ai.djl.tensorrt:tensorrt"
    if (!project.hasProperty("staging")) {
        runtimeOnly "ai.djl.onnxruntime:onnxruntime-engine"
    }
    if (JavaVersion.current() >= JavaVersion.VERSION_15) {
        testRuntimeOnly "org.bouncycastle:bcpkix-jdk15on:1.70"
        testRuntimeOnly "org.bouncycastle:bcprov-jdk15on:1.70"
    }
    runtimeOnly project(":engines:python")

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ai.djl.serving.ModelServer'
    }
    includeEmptyDirs = false

    exclude "META-INF/maven/**"
    exclude "META-INF/INDEX.LIST"
    exclude "META-INF/MANIFEST*"
}

application {
    mainClass = System.getProperty("main", "ai.djl.serving.ModelServer")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    environment("MXNET_ENGINE_TYPE", "NaiveEngine")
    environment("OMP_NUM_THREADS", "1")
    environment("MODEL_SERVER_HOME", "${project.projectDir}")
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    systemProperty("ai.djl.pytorch.num_interop_threads", "1")
    // systemProperty("ai.djl.logging.level", "debug")
    systemProperty("log4j.configurationFile", "${project.projectDir}/src/main/conf/log4j2.xml")
    applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4000"]
    workingDir getProjectDir()
}

clean {
    delete file("plugins")
    delete file("logs")
}

task createDeb(type: Deb, dependsOn: distTar) {
    doFirst {
        exec {
            commandLine "tar", "xvf", "${project.buildDir}/distributions/serving-${project.version}.tar", "-C", "${project.buildDir}"
        }
    }

    packageName = "djl-serving"
    archiveVersion = "${project.version}"
    release = 1
    maintainer = "Deep Java Library <djl-dev@amazon.com>"
    summary = "djl-serving is a general model server that can serve both Deep Learning models" +
            "and traditional machine learning models."

    postInstall "mkdir -p /usr/local/djl-serving-${project.version}/models" +
            " && mkdir -p /usr/local/djl-serving-${project.version}/plugins"

    from("${project.buildDir}/serving-${project.version}") {
        into "/usr/local/djl-serving-${project.version}"
    }
    link("/usr/bin/djl-serving", "/usr/local/djl-serving-${project.version}/bin/serving")
}

startScripts {
    defaultJvmOpts = []
    doLast {
        String text = unixScript.text.replace('exec "$JAVACMD" "$@"',
                'if [ "${OMP_NUM_THREADS}" = "" ] && [ "${NO_OMP_NUM_THREADS}" = "" ] ; then\n' +
                '    export OMP_NUM_THREADS=1\n' +
                'fi\n' +
                'if [ "${TF_CPP_MIN_LOG_LEVEL}" = "" ] ; then\n' +
                '    export TF_CPP_MIN_LOG_LEVEL=1\n' +
                'fi\n' +
                'if [ "${TF_NUM_INTRAOP_THREADS}" = "" ] ; then\n' +
                '    export TF_NUM_INTRAOP_THREADS=1\n' +
                'fi\n' +
                'exec env MXNET_ENGINE_TYPE="NaiveEngine" "$JAVACMD" "$@"')
        text = text.replace('DEFAULT_JVM_OPTS=""', 'if [ "${MODEL_SERVER_HOME}" = "" ] ; then\n' +
                '    export MODEL_SERVER_HOME=${APP_HOME}\n' +
                'fi\n' +
                'DEFAULT_JVM_OPTS="-Dlog4j.configurationFile=${APP_HOME}/conf/log4j2.xml"\n')
        text = text.replaceAll('CLASSPATH=\\$APP_HOME/lib/.*', 'CLASSPATH=\\$APP_HOME/lib/*')
        unixScript.text = text
    }
}

applicationDistribution.from("src/main/conf/") {
    into "conf"
}
tasks.test.dependsOn(
        ":central:jar",
        ":plugins:kserve:jar",
        ":plugins:plugin-management-plugin:jar",
        ":plugins:static-file-plugin:jar")
tasks.run.dependsOn(
        ":plugins:kserve:jar",
        ":plugins:management-console:jar",
        ":plugins:static-file-plugin:jar")

test {
    workingDir projectDir
}
