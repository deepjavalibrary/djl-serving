plugins {
    id "maven-publish"
    id "signing"
}

group "ai.djl.python"

dependencies {
    api platform("ai.djl:bom:${project.version}")
    api "ai.djl:api"
    api "io.netty:netty-codec:${netty_version}"
    api "io.netty:netty-handler:${netty_version}"
    api "io.netty:netty-transport:${netty_version}"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-aarch_64"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-x86_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-aarch_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-x86_64"
    api "org.slf4j:slf4j-api:${slf4j_version}"

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
}

sourceSets {
    main.resources.srcDirs "setup"
}

processResources {
    exclude "build", "*.egg-info", "__pycache__", "PyPiDescription.rst", "setup.py"
    outputs.file file("${project.buildDir}/classes/java/main/native/lib/python.properties")
    doLast {
        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/native/lib/python.properties")
        def sb = new StringBuilder()
        sb.append("version=${version}\nlibraries=djl_python_engine.py")
        for (String name : file("setup/djl_python").list().sort()) {
            sb.append(",djl_python/").append(name)
        }
        propFile.text = sb.toString()
    }
}

clean.doFirst {
    delete "setup/build/"
    delete "setup/djl_python.egg-info/"
    delete "setup/__pycache__/"
    delete "setup/djl_python/__pycache__/"
    delete "src/test/resources/accumulate/__pycache__/"
    delete System.getProperty("user.home") + "/.djl.ai/python"
}

task formatPython {
    doFirst {
        exec {
            commandLine "bash", "-c", "find . -name '*.py' -print0 | xargs -0 yapf --in-place"
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title "DJL Engine Adapter for Python ${version}"
    options.encoding = "UTF-8"
    options.overview "src/main/javadoc/overview.html"
    options.addBooleanOption("-allow-script-in-comments", true)
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifacts = [jar, javadocJar, sourcesJar]
            pom {
                name = "DJL Engine Adapter for Python"
                description = "Deep Java Library (DJL) Engine Adapter for Python"
                url = "https://github.com/deepjavalibrary/djl-serving/tree/master/engines/python"

                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:deepjavalibrary/djl-serving.git"
                    developerConnection = "scm:git:git@github.com:deepjavalibrary/djl-serving.git"
                    url = "https://github.com/deepjavalibrary/djl-serving"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("snapshot")) {
                name = "snapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = findProperty("ossrhUsername")
                    password = findProperty("ossrhPassword")
                }
            } else if (project.hasProperty("staging")) {
                name = "staging"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty("ossrhUsername")
                    password = findProperty("ossrhPassword")
                }
            } else {
                name = "local"
                url = "build/repo"
            }
        }
    }
}
