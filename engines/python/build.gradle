
group "ai.djl.python"

dependencies {
    api platform("ai.djl:bom:${project.version}")
    api "ai.djl:api"
    api "io.netty:netty-codec:${netty_version}"
    api "io.netty:netty-handler:${netty_version}"
    api "io.netty:netty-transport:${netty_version}"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-aarch_64"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-x86_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-aarch_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-x86_64"
    api "org.slf4j:slf4j-api:${slf4j_version}"

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation "org.testng:testng:${testng_version}"
}

sourceSets {
    main.resources.srcDirs "setup"
}

processResources {
    exclude "build", "*.egg-info", "__pycache__", "PyPiDescription.rst", "setup.py"
    outputs.file file("${project.buildDir}/classes/java/main/native/lib/python.properties")
    doLast {
        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/native/lib/python.properties")
        def sb = new StringBuilder()
        sb.append("version=${version}\nlibraries=djl_python_engine.py")
        for (String name : file("setup/djl_python").list().sort()) {
            sb.append(",djl_python/").append(name)
        }
        propFile.text = sb.toString()
    }
}

clean.doFirst {
    delete "setup/build/"
    delete "setup/djl_python.egg-info/"
    delete "setup/__pycache__/"
    delete "setup/djl_python/__pycache__/"
    delete "src/test/resources/accumulate/__pycache__/"
    delete System.getProperty("user.home") + "/.djl.ai/python"
}

task formatPython {
    doFirst {
        exec {
            commandLine "bash", "-c", "find . -name '*.py' -print0 | xargs -0 yapf --in-place"
        }
    }
}