group "ai.djl.python"

def stripPackageVersion()  {
    def initFile = file("setup/djl_python/__init__.py")
    def initLines = initFile.readLines()
    def versionRegex = /^__version__.*$/
    def overwriteInitLines = initLines.findAll { !(it =~ versionRegex) }

    initFile.withWriter(out -> {
        overwriteInitLines.each {
	        out.println it
	    }
    })
}

dependencies {
    api platform("ai.djl:bom:${project.version}")
    api "ai.djl:api"
    api "io.netty:netty-codec:${netty_version}"
    api "io.netty:netty-handler:${netty_version}"
    api "io.netty:netty-transport:${netty_version}"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-aarch_64"
    api "io.netty:netty-transport-native-epoll:${netty_version}:linux-x86_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-aarch_64"
    api "io.netty:netty-transport-native-kqueue:${netty_version}:osx-x86_64"
    api "org.slf4j:slf4j-api:${slf4j_version}"

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation "org.testng:testng:${testng_version}"
}

sourceSets {
    main.resources.srcDirs "setup"
}

processResources {
    doFirst {
	    stripPackageVersion()
    	def versionLine = new StringBuilder()
    	versionLine.append("__version__ = '${djl_version}'")
    	file("setup/djl_python/__init__.py").append(versionLine)
    }

    exclude "build", "*.egg-info", "__pycache__", "PyPiDescription.rst", "setup.py"
    outputs.file file("${project.buildDir}/classes/java/main/native/lib/python.properties")
    doLast {
        // write properties
        def propFile = file("${project.buildDir}/classes/java/main/native/lib/python.properties")
        def sb = new StringBuilder()
        sb.append("version=${version}\nlibraries=djl_python_engine.py")

        def list = []
        def dir = file("setup/djl_python")
        dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
            if (file.isFile()) {
                list.add(dir.relativePath(file))
            }
        }
        list.sort()
        for (String name : list) {
            if (!name.contains("__pycache__")) {
                sb.append(",djl_python/").append(name)
            }
        }
        propFile.text = sb.toString()
    }
}

test {
    doFirst {
        environment("TENSOR_PARALLEL_DEGREE", "2")
    }
}

clean.doFirst {
    delete "setup/build/"
    delete "setup/djl_python.egg-info/"
    delete "setup/__pycache__/"
    delete "setup/djl_python/__pycache__/"
    delete "setup/djl_python/tests/__pycache__/"
    delete "setup/djl_python/scheduler/__pycache__/"
    delete "src/test/resources/accumulate/__pycache__/"
    delete System.getProperty("user.home") + "/.djl.ai/python"
    stripPackageVersion()
}